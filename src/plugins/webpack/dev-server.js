const expressMiddleware = require('webpack-dev-middleware');
const path = require('path');
const webpack = require('webpack');
const MFS = require('memory-fs');
const HTMLPlugin = require('html-webpack-plugin')
const VueSSRPlugin = require('vue-ssr-webpack-plugin')

const clientConfig = require('./build/webpack.client.config');
const serverConfig = require('./build/webpack.server.config');
const log4js = require('koa-log4');
const logger = log4js.getLogger('pomjs_render');

/**
 * 处理webpack 编译 
 */
const isProd = process.env.NODE_ENV === 'production';

module.exports = (app, cb) => {
  let bundle
  let template

  // modify client config to work with hot middleware
  clientConfig.entry.app = '/Users/joe/work/pomjs/example/pages/index/entry.js';
  clientConfig.plugins.push(new HTMLPlugin({
    title: 'pomjs',
    template: '/Users/joe/work/pomjs/example/pages/index.template.html'
  }));
  if (!isProd) {
    clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
    clientConfig.output.filename = '[name].js'
    clientConfig.plugins.push(
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoEmitOnErrorsPlugin()
    )
  }


  // dev middleware
  const clientCompiler = webpack(clientConfig)
  if (isProd) {
    clientCompiler.run((err, stats) => {
      if (err) throw err
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))
    });
  } else {
    const devMiddleware = require('./koa2-webpack-dev-server')(clientCompiler, {
      publicPath: clientConfig.output.publicPath,
      noInfo: true
    })
    clientCompiler.plugin('done', () => {
      const fs = devMiddleware.fileSystem
      const filePath = path.join(clientConfig.output.path, 'index.html')
      if (fs.existsSync(filePath)) {
        template = fs.readFileSync(filePath, 'utf-8')
        if (bundle && cb) {
          cb(bundle, template)
        }
      }
    })

    if (app) {
      app.use(devMiddleware);
      app.use(require('./koa2-hotMiddleware')(clientCompiler))
    }
  }

  serverConfig.entry = '/Users/joe/work/pomjs/example/pages/index/entry-server';
  serverConfig.output.path = '/Users/joe/work/pomjs/example/dist';
  serverConfig.plugins.push(
    new VueSSRPlugin({
      filename: 'vue-ssr-bundle.json'
    })
  );

  const serverCompiler = webpack(serverConfig)
  if (isProd) {
    serverCompiler.run((err, stats) => {
      if (err) throw err
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))
    });
  } else {
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
      if (err) throw err
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))

      // read bundle generated by vue-ssr-webpack-plugin
      const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-bundle.json')
      bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
      if (template && cb) {
        cb(bundle, template)
      }
    });
  }

}